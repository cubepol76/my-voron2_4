[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

####################################################################################################
#  Cancel the printing
####################################################################################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  {% set retract = printer['gcode_macro _GLOBAL_VARIABLE'].move.retract.cancel %}
  {% set pos = printer['gcode_macro _GLOBAL_VARIABLE'].pos %}

  # Restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if not printer.pause_resume.is_paused %}
    _TOOLHEAD_PARK_PAUSE_CANCEL X={pos.park.x} Y={pos.park.y}
  {% endif %}

  _CLIENT_RETRACT LENGTH={(retract * (-1))}

  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False

  # Clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0

  CANCEL_PRINT_BASE

  PERIPH_RESET STEPPER_OFF=0
  UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10
  UPDATE_DELAYED_GCODE ID=_DELAY_EXHAUST_OFF DURATION=180
  UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION=180



####################################################################################################
#  Pause the printing
####################################################################################################
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ### Input parameter ##############################################################################
  {% set p_restore = True if params.RESTORE|default(1)|int == 1 else False %}
  ##################################################################################################
  {% set idle_timeout = 1800 %}
  {% set temp = printer[printer.toolhead.extruder].target %}

  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': p_restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}



####################################################################################################
#  Resume the printing
####################################################################################################
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  {% set speed = printer['gcode_macro _GLOBAL_VARIABLE'].speed %}
  {% set can_extrude = printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}

  # Printer comming from timeout idle state
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the Â° as py2 env's would throw an error otherwise
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %}
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
  {% endif %}

  {% if do_resume %}
    {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
    _CLIENT_EXTRUDE
    RESUME_BASE VELOCITY={speed.pos}
  {% endif %}



# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"



# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"



# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}



##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  {% set retract = printer['gcode_macro _GLOBAL_VARIABLE'].move.retract.pause %}
  {% set pos = printer['gcode_macro _GLOBAL_VARIABLE'].pos %}
  {% set move = printer['gcode_macro _GLOBAL_VARIABLE'].move %}
  {% set speed = printer['gcode_macro _GLOBAL_VARIABLE'].speed %}

  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}

  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + move.zhop), z_min]|max, (max.z - origin.z)]|min %}

  {% set x_park = params.X if params.X is defined else cpos.park.x %}
  {% set y_park = params.Y if params.X is defined else cpos.park.y %}

  _CLIENT_RETRACT LENGTH={(retract * (-1))}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{speed.zhop}
    G1 X{pos.park.x} Y{pos.park.y} F{speed.pos}
    {% if not printer.gcode_move.absolute_coordinates %}
      G91
    {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}



[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set move_unretract = printer['gcode_macro _GLOBAL_VARIABLE'].move.unretract %}
  {% set speed_unretract = printer['gcode_macro _GLOBAL_VARIABLE'].speed.unretract %}
  {% set length = params.LENGTH|default(move_unretract.resume)|default(1.0)|float %}
  {% set speed = params.SPEED|default(speed_unretract)|default(35 * 60) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####

  {% if printer[printer.toolhead.extruder].can_extrude %}
    M83
    G1 E{length} F{speed}
    {% if absolute_extrude %}
      M82
    {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
  {% endif %}



[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set move_retract = printer['gcode_macro _GLOBAL_VARIABLE'].move.retract %}
  {% set speed_retract = printer['gcode_macro _GLOBAL_VARIABLE'].speed.retract %}

  {% set length = params.LENGTH|default(move_retract.pause) %}
  {% set speed = params.SPEED|default(speed_retract) %}

  _CLIENT_EXTRUDE LENGTH=-{length} SPEED={speed}
